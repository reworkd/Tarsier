name: Test and Publish
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20.x"

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.pre-val.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if current version is published
        id: pre-val
        run: |
          LOCAL_VERSION=$(grep '^version =' pyproject.toml | head -1 | awk -F '"' '{print $2}')
          REMOTE_VERSION=$(curl -s https://pypi.org/pypi/tarsier/json | jq -r .info.version)

          echo "Local version: $LOCAL_VERSION"
          echo "Remote version: $REMOTE_VERSION"

          if [ "$LOCAL_VERSION" != "$REMOTE_VERSION" ]; then
              echo "Version $LOCAL_VERSION is not published yet"
              echo "::set-output name=should_publish::true"
          fi

  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"
      - run: poetry install --only dev
      - name: Run ruff check
        run: poetry run ruff format --check .

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"
      - run: poetry install
      - name: Run mypy check
        run: poetry run mypy .

  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json
      - name: Compile TypeScript
        run: npm ci && npm run lint && npm run build
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"
      - run: poetry install && poetry run playwright install chromium
      - name: Run pytest check
        run: poetry run pytest -vv --cov="tarsier" .
        env:
          TARSIER_GOOGLE_OCR_CREDENTIALS: ${{ secrets.TARSIER_GOOGLE_OCR_CREDENTIALS }}
          TARSIER_MICROSOFT_OCR_CREDENTIALS: ${{ secrets.TARSIER_MICROSOFT_OCR_CREDENTIALS }}

  publish:
    needs: [check-version, ruff, mypy, pytest]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.check-version.outputs.should_publish == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json
      - name: Compile TypeScript
        run: npm ci && npm run build
      - name: Install poetry
        run: pipx install poetry
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"
      - run: poetry install
      - name: Build and Publish
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish --build
